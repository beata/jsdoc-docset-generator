var fs = require('fs');
var lodashStreamer = require('lodash-template-stream');
var rimraf = require('rimraf');
var mkdirp = require('mkdirp');
var ncp = require('ncp');
var Sequelize = require("sequelize");

var INFO_PLIST = 'Info.plist';
var ICON = 'icon.png';
var SQLITE_DB = 'docSet.dsidx';

var DocSetGenerator = function (config) {
    /**
     * Internal config
     * @type {Object}
     */
    this.config = this._parseConfig(config);
    console.log(this.config);
};

/**
 *
 */
DocSetGenerator.prototype.createDocSetFolder = function () {
    if (fs.existsSync(this.getDocSetFullPath())) {
        // delete the folder
        rimraf(this.getDocSetFullPath(), function(err) {
            if (err) { throw err; }
            this._createFolderStructure()
        }.bind(this));
    } else {
        this._createFolderStructure();
    }
};

/**
 *
 * @param {*} config
 * @returns {*}
 * @private
 */
DocSetGenerator.prototype._parseConfig = function (config) {
    if (!fs.existsSync(config.docSetRoot)) {
        throw "Please provide the path to the directory where you want to generate the docset (config: docSetRoot)";
    }
    if (!fs.existsSync(config.documentation)) {
        throw "Please provide the path to the documentation generated by jsdoc (config: documentation)";
    }
    if (typeof config.docSetName !== 'string' || config.docSetName.trim().length === 0) {
        throw "Please pass a valid name for this docSet (config: docSetName)";
    }


    config.docSetFullPath = config.docSetRoot + config.docSetIdentifier + '.docset';

    ['docSetIdentifier', 'docSetPlatformFamily'].forEach(function (key) {
        if (typeof config[key] !== 'string' || config[key].trim().length === 0) {
            config[key] = config.docSetName;
        }
    });

    return config;
};

/**
 * @private
 */
DocSetGenerator.prototype._createFolderStructure = function () {
    mkdirp(this.getDocumentsFolder(), function (err) {
        if (err) { throw err; }
        this._copyDocumentation();
        this._copyIcon();
        this._createInfoPlist();
        this.createDatabase();
    }.bind(this));
};

/**
 * @private
 */
DocSetGenerator.prototype._createInfoPlist = function () {
    fs.createReadStream('./templates/' + INFO_PLIST)
        .pipe(lodashStreamer(this.config))
        .pipe(fs.createWriteStream(this.getContentsFolder() + INFO_PLIST));
};

/**
 *
 * @private
 */
DocSetGenerator.prototype._copyIcon = function () {
    var iconPath = this.config.icon;
    if (fs.existsSync(iconPath)) {
        fs.createReadStream(iconPath)
            .pipe(fs.createWriteStream(this.getDocSetFullPath() + '/' + ICON));
    } else {
        console.log('Missing icon.');
    }
};


/**
 *
 */
DocSetGenerator.prototype.createDatabase = function () {
    var sqliteFilePath = this.getResourcesFolder() + SQLITE_DB;

    this.sequelize = new Sequelize('database_name', 'username', 'password', {
        dialect: 'sqlite',
        storage: sqliteFilePath
    });

    //sqlite> CREATE TABLE searchIndex(id INTEGER PRIMARY KEY, name TEXT, type TEXT, path TEXT);
    this.searchIndexTable = this.sequelize.define('searchIndex', {
        id: {
            type: Sequelize.INTEGER,
            autoIncrement: true
        },
        name: {
            type: Sequelize.STRING
        },
        type: {
            type: Sequelize.STRING
        },
        path: {
            type: Sequelize.STRING
        }
    }, {
        freezeTableName: true, // otherwise the table is renamed searchIndexes
        timestamps: false
    });

    // @todo add unique index
    //sqlite> CREATE UNIQUE INDEX anchor ON searchIndex (name, type, path);

    this.sequelize
        .sync({ force: true })
        .complete(function(err) {
            if (err) { throw err; }

            this.searchIndexTable
                .create({
                    name: 'some/module',
                    type: 'Module',
                    path: 'some.module.html'
                })
                .complete(function(err, data) {

                });

        }.bind(this));

};

/**
 *
 * @private
 */
DocSetGenerator.prototype._copyDocumentation = function () {
    ncp(this.config.documentation, this.getDocumentsFolder(), function (err) {
        if (err) { throw err; }
        console.log('Documentation copied to ' + this.getDocumentsFolder());
    }.bind(this));
};


/**
 *
 * @returns {string}
 * @private
 */
DocSetGenerator.prototype.getDocSetFullPath = function () {
    return this.config.docSetFullPath;
};

/**
 *
 * @returns {string}
 * @private
 */
DocSetGenerator.prototype.getContentsFolder = function () {
    return this.getDocSetFullPath() + '/Contents/';
};

/**
 *
 * @returns {string}
 * @private
 */
DocSetGenerator.prototype.getResourcesFolder = function () {
    return this.getDocSetFullPath() + '/Contents/Resources/';
};

/**
 *
 * @returns {string}
 * @private
 */
DocSetGenerator.prototype.getDocumentsFolder = function () {
    return this.getDocSetFullPath() + '/Contents/Resources/Documents/';
};

module.exports = DocSetGenerator;